git add .
git commit -m " message "
git status

dans backend add jwt 
1)commande :> composer require tymon/jwt-auth

dans frontend 
1) install bootstrap : npm install bootstrap --save
add bootstrap to styles.css
@import '~bootstrap/dist/css/bootstrap.css';

2) generate components

login 
navbar
password ->1 ) request-rest     ->2) response-reset
profile
signup


****** 3 configure jwt******
https://jwt-auth.readthedocs.io/en/develop/quick-start/
1) configure jwt 
Add the service provider to the providers array in the config/app.php config file as follows:
'providers' => [

    ...

    Tymon\JWTAuth\Providers\LaravelServiceProvider::class,
]

php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"


php artisan jwt:secret


2) va implementer interface dans model user 

<?php

namespace App;

use Tymon\JWTAuth\Contracts\JWTSubject;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable implements JWTSubject
{
    use Notifiable;

    // Rest omitted for brevity

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }
}

3) go to -> config/auth.php
'defaults' => [
    'guard' => 'api',
    'passwords' => 'users',
],

...

'guards' => [
    'api' => [
        'driver' => 'jwt',
        'provider' => 'users',
    ],
],
4) add routing in app.php
Route::group([

    'middleware' => 'api',
    'prefix' => 'auth'

], function () {

    Route::post('login', 'AuthController@login');
    Route::post('logout', 'AuthController@logout');
    Route::post('refresh', 'AuthController@refresh');
    Route::post('me', 'AuthController@me');

});

5) create controller -> 
php artisan make:controller AuthController

6) add in this controller 
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;

class AuthController extends Controller
{
    /**
     * Create a new AuthController instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth:api', ['except' => ['login']]);
    }

    /**
     * Get a JWT via given credentials.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function login()
    {
        $credentials = request(['email', 'password']);

        if (! $token = auth()->attempt($credentials)) {
            return response()->json(['error' => 'Unauthorized'], 401);
        }

        return $this->respondWithToken($token);
    }

    /**
     * Get the authenticated User.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function me()
    {
        return response()->json(auth()->user());
    }

    /**
     * Log the user out (Invalidate the token).
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function logout()
    {
        auth()->logout();

        return response()->json(['message' => 'Successfully logged out']);
    }

    /**
     * Refresh a token.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function refresh()
    {
        return $this->respondWithToken(auth()->refresh());
    }

    /**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function respondWithToken($token)
    {
        return response()->json([
            'access_token' => $token,
            'token_type' => 'bearer',
            'expires_in' => auth()->factory()->getTTL() * 60
        ]);
    }
}
****4 angular routing****
1) add navbar html 
<nav class="navbar navbar-light bg-light">
    <a class="navbar-brand">Navbar</a>
    <form class="form-inline">
        <a class="navbar-brand mr-5" routerLink="/login">Login</a>
        <a class="navbar-brand mr-5" routerLink="/profile">Profile</a>
    </form>
  </nav>
2) add in app compnent html touter-outlet
<app-navbar></app-navbar>
<div class="container">
  <router-outlet></router-outlet>
</div>

3)add in app-routing.module.ts our routes
const routes: Routes = [
  {path: "login",component: LoginComponent},
  {path: "signup",component: SignupComponent},
  {path: "profile",component: ProfileComponent},
  {path: "request-password-reset",component: RequestResetComponent},
  {path: "request-password-reqponse",component: ResponseResetComponent},
];


****5 create login ***
add html login
import httpClientModule 
import { HttpClientModule } from '@angular/common/http';

add function onSubmit 
onSubmit()
  {
    console.log("dd");
    return this.http.post('http://localhost:8000/api/auth/login',this.form).subscribe(
      data=>console.log(data),
      error=>console.log(error)
    );
  }

****6 cros ******

php artisan make:middlewire cors
go to app http middleware in this middelware add
header('Acces-Control-Allow-Origin : *');
header('Acces-Control-Allow-Headers : Content-type,X-Auth-Token,Authorization,Origin');

go to kernel.php 
in $routeMiddleware 
copy guest
and rename to CORS
and add in $middleware this cors

----we done 401 unothorized--------------------
in api.php remove prefix =>auth
in url dont use auth
add handleError
handleError(error)
  {
    this.error=error.error.error;
  }
change error in controller to Email or password does't exist


****7 Signup  ******
add signup route in api.php
Route::post('signup', 'AuthController@signup');
add function signup in controller
 public function signup(Request $request)
    {
        $user = User::create($request->all());
        return $this->login($request);
    }
in contructeur controlleur add signup too
public function __construct()
    {
        $this->middleware('auth:api', ['except' => ['login','signup']]);
    }
add html and function submit

add request in php 
php artisan make:request SignUpRequest

set authorize to true

and go to rules
return [
            'name' => 'required',
            'email' => 'required|email|unique:users',
            'password' => 'required|confirmed'
        ];

modify request  in controller in singup
public function signup(SignUpRequest $request)
    {
        $user = User::create($request->all());
        return $this->login($request);
    }
and crypt password go to model user in app\user
add function 
 public function setPasswordAttribute($value)
    {
        return $this->attributes['password']=bcrypt($value);
    }

in your component signup 
public form = {
    email: null,
    name: null,
    password: null,
    password_confirmation: null
  };
  public error= [];
  constructor(private http: HttpClient) { }

  ngOnInit(): void {
  }

  onSubmit()
  {
    return this.http.post('http://localhost:8000/api/signup',this.form).subscribe(
      data=>console.log(data),
      error=> this.handleError(error)
    );
  }
  handleError(error)
  {
    this.error=error.error.errors;
  }
in html add test error
<div class="form-group row">
                  <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
                  <div class="col-sm-10">
                    <input type="password" 
                        class="form-control"
                         id="inputPassword3"
                         name="password"
                         [(ngModel)]="form.password"
                         required
                         >
                         <div class="alert alert-danger" [hidden]="!error.password">
                            {{error.password}}
                          </div>
                  </div>
                </div>

**************
***8 Refactor with Service******
ng generate service Services/Jarwis --skipTests
import this service in app.module.ts
import { JarwisService } from './Services/jarwis.service';

add in service 
private baseUrl = 'http://localhost:8000/api';
  constructor(private http: HttpClient) { }
  signup(data)
  {
    return this.http.post(`${this.baseUrl}/signup`,data);
  }
  login(data)
  {
    return this.http.post(`${this.baseUrl}/login`,data);
  }

in component import this service and subscribe
this.Jarwis.signup(this.form).subscribe(
      data=>console.log(data),
      error=> this.handleError(error)
    );

*****************
****9 Handle JWT Token in FrontEnd *******
ng generate service Services/Token --skipTests

in login component add handleResponse
handleResponse(data)
  {
    this.Token.handle(data.access_token);
  }
call this methode on submit insuccess data
 onSubmit()
  {
    console.log("dd");
    return this.Jarwis.login(this.form).subscribe(
      data=>this.handleResponse(data),
      error=> this.handleError(error)
    );
  }
add in Tokenservice this 

private iss = {
    login : 'http://localhost:8000/api/login',
    signup : 'http://localhost:8000/api/signup'
  };
  constructor() { }

  handle(token)
  {
    this.set(token);
    console.log(this.isValid());
  }
  set(token)
  {
    localStorage.setItem('token',token);
  }
  get()
  {
    return localStorage.getItem('token');
  }
  remove()
  {
    return localStorage.removeItem('token');
  }
  isValid()
  {
    const token= this.get();
    if(token)
    {
      const payload= this.payload(token);
      if(payload)
      {
        return Object.values(this.iss).indexOf(payload.iss) > -1 ? true : false;
      }
    }
    return false;
  }
  payload(token)
  {
    const payload= token.split('.')[1];
    return this.decode(payload);
  }
  decode(payload)
  {
    return JSON.parse(atob(payload));
  }
  loggedIn()
  {
    return this.isValid();
  }

***************
****10  Redirect after Login, Protect Route *****

add service aith
ng generate service Services/Auth --skipTests
in this service import
import { TokenService } from './token.service';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
export class AuthService {
  private loggedIn= new BehaviorSubject<boolean>(this.token.loggedIn());
  authStatus=this.loggedIn.asObservable();
  constructor(private token:TokenService) { }

  changeAuthStatus(value: boolean)
  {
    this.loggedIn.next(value);
  }
}


2) add this service in contructor login component
and go to handle response in login component
add /*this.Auth.changeAuthStatus(true);*/
handleResponse(data)
  {
    this.Token.handle(data.access_token);
    this.Auth.changeAuthStatus(true);
    this.router.navigateByUrl('/profile');
  }

and check url login or logout in navbar add
public loggedIn : boolean;
  constructor(
    private Auth:AuthService) { }

  ngOnInit(): void {
    this.Auth.authStatus.subscribe(value=> this.loggedIn=value);
  }
<a class="navbar-brand mr-5" routerLink="/login" *ngIf="!loggedIn">Login</a>
        <a class="navbar-brand mr-5" routerLink="/profile" *ngIf="loggedIn">Logout</a>
        


***************
****11 Logout & CanActivate *****
in navbar add logout
<a class="navbar-brand mr-5" href="#" (click)="logout($event)" *ngIf="loggedIn">Logout</a>
logout(event : MouseEvent)
  { 
    event.preventDefault();
    this.Token.remove();
    this.Auth.changeAuthStatus(false);
    this.router.navigateByUrl('/login');
  }

2)generate service after login and bofore login
ng generate service Services/before-login --skipTests
ng generate service Services/after-login --skipTests

implement interface CanActivate
and add this
import { TokenService } from './token.service';
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot,RouterStateSnapshot } from '@angular/router';
import { Observable} from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class AfterLoginService implements CanActivate{

  constructor(private Token: TokenService) { }
  canActivate(route: ActivatedRouteSnapshot, 
  state: RouterStateSnapshot):  boolean |
                                Observable<boolean > |
                                Promise<boolean > 
  {
      return this.Token.loggedIn();
  }
}

import { TokenService } from './token.service';
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot,RouterStateSnapshot } from '@angular/router';
import { Observable} from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class BeforeLoginService {

  constructor(private Token: TokenService) { }
  canActivate(route: ActivatedRouteSnapshot, 
  state: RouterStateSnapshot):  boolean |
                                Observable<boolean > |
                                Promise<boolean > 
  {
      return !this.Token.loggedIn();
  }
}

3) and go to routing and call this service
  {path: "login",component: LoginComponent,canActivate: [BeforeLoginService]},


***************
****12 Reset Password  *****
add html to reset password request 

add in service jarwis 
sendPasswordResetLink(data)
  {
    return this.http.post(`${this.baseUrl}/sendPasswordResetLink`,data);
  }

add controller php artisan make:Controller ResetPasswordController
add route in api.php
Route::post('sendPasswordResetLink', 'ResetPasswordController@sendEmail');

install notify
npm install ng-snotify

***************
****13 Send Email for Reset Password  *****
go to Reset Controller Reset password



php artisan make:mail ResetPasswordMail --markdown=Email.passwordReset
and add function ->
function sendEmail(Request $request)
function send($email)
validateEmail($email)
failedResponse()
function successResponse()
and change .env with parametre mailtrap.io
MAIL_MAILER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=ad5cb189498503
MAIL_PASSWORD=a5172a5864defd
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="Example"

*****************
****14 Send Token with Email
php artisan make:migration password_resets_table --create=password_resets

create mailable
php artisan make:mail ResetPasswordMail --markdown=Email.passwordReset
add in api.php
Route::post('sendPasswordResetLink', 'ResetPasswordController@sendEmail');
create function in controller
function createToken($email)
 function saveToken($token,$email)

public function send($email)
    {
        $token = $this->createToken($email);
        Mail::to($email)->send(new ResetPasswordMail($token));
    }

and go to mail app > MAIL >s
public function __construct($token)
    {
        $this->token=$token;
    }

    /**
     * Build the message.
     *
     * @return $this
     */
    public function build()
    {
        return $this->markdown('Email.passwordReset')->with(['token'=> $this->token]);
    }
and go to resource views email >
@component('mail::button', ['url' => 'http://localhost:4200/response-password-reset?token='.$token])


and add in api.php
 Route::post('resetPassword', 'ChangePasswordController@process');
and add controller 
php artisan make:Controller ChangePasswordController
 and in service jawis add 
changePassword(data)
  {
    return this.http.post(`${this.baseUrl}/changePasswordResetLink`,data);
  }

after go to response component add html 
and get token from url 
constructor(
    private route:ActivatedRoute,
    private Jarvis: JarwisService
  ) 
  { 
   route.queryParams.subscribe(params=>{
    this.form.resetToken=params['token']
    });
  }

**********
**15  Reset Password****

make request to valide function process in controller ChangePasswordController
php artisan make:request ChangePasswordRequest
return true;
return [
            'email'=> 'required|email',
            'password'=> 'required|confirmed'
        ];

in controller 
public function process(ChangePasswordRequest $request)
    {
       return $this->getPasswordResetTableRow($request)
       ->count() > 0 ? $this->changePassword($request) : $this->tokenNotFoundResponse();
    }
    private function getPasswordResetTableRow($request)
    {
        return DB::table('password_resets')
        ->where(['email'=>$request->email,'token'=>$request->resetToken]);
    }   
    private function changePassword($request)
    {
        $user=User::whereEmail($request->email)->first();
        $user->update(['password'=>$request->password]);
        $this->getPasswordResetTableRow($request)->delete();
        return response()->json([
            'data'=>'Password successfully changed'
        ],Response::HTTP_CREATED);
    }
    private function tokenNotFoundResponse()
    {
        return response()->json([
            'error'=>'Token or Email is Incorrect'
        ],Response::HTTP_UNPROCESSABLE_ENTITY);
    }

api.php
 Route::post('changePasswordResetLink', 'ChangePasswordController@process');
in reposnse reset password
onSubmit()
  {
    this.Jarvis.changePassword(this.form).subscribe(
      data=> this.handleResponse(data),
      error=> this.handleError(error)
    );
  }
  handleResponse(data)
  {
    this.router.navigateByUrl('/login');
  }
  handleError(error)
  {

  }



