git add .
git commit -m " message "
git status

dans backend add jwt 
1)commande :> composer require tymon/jwt-auth

dans frontend 
1) install bootstrap : npm install bootstrap --save
add bootstrap to styles.css
@import '~bootstrap/dist/css/bootstrap.css';

2) generate components

login 
navbar
password ->1 ) request-rest     ->2) response-reset
profile
signup


****** 3 configure jwt******
https://jwt-auth.readthedocs.io/en/develop/quick-start/
1) configure jwt 
Add the service provider to the providers array in the config/app.php config file as follows:
'providers' => [

    ...

    Tymon\JWTAuth\Providers\LaravelServiceProvider::class,
]

php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"


php artisan jwt:secret


2) va implementer interface dans model user 

<?php

namespace App;

use Tymon\JWTAuth\Contracts\JWTSubject;
use Illuminate\Notifications\Notifiable;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable implements JWTSubject
{
    use Notifiable;

    // Rest omitted for brevity

    /**
     * Get the identifier that will be stored in the subject claim of the JWT.
     *
     * @return mixed
     */
    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * Return a key value array, containing any custom claims to be added to the JWT.
     *
     * @return array
     */
    public function getJWTCustomClaims()
    {
        return [];
    }
}

3) go to -> config/auth.php
'defaults' => [
    'guard' => 'api',
    'passwords' => 'users',
],

...

'guards' => [
    'api' => [
        'driver' => 'jwt',
        'provider' => 'users',
    ],
],
4) add routing in app.php
Route::group([

    'middleware' => 'api',
    'prefix' => 'auth'

], function () {

    Route::post('login', 'AuthController@login');
    Route::post('logout', 'AuthController@logout');
    Route::post('refresh', 'AuthController@refresh');
    Route::post('me', 'AuthController@me');

});

5) create controller -> 
php artisan make:controller AuthController

6) add in this controller 
<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;

class AuthController extends Controller
{
    /**
     * Create a new AuthController instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth:api', ['except' => ['login']]);
    }

    /**
     * Get a JWT via given credentials.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function login()
    {
        $credentials = request(['email', 'password']);

        if (! $token = auth()->attempt($credentials)) {
            return response()->json(['error' => 'Unauthorized'], 401);
        }

        return $this->respondWithToken($token);
    }

    /**
     * Get the authenticated User.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function me()
    {
        return response()->json(auth()->user());
    }

    /**
     * Log the user out (Invalidate the token).
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function logout()
    {
        auth()->logout();

        return response()->json(['message' => 'Successfully logged out']);
    }

    /**
     * Refresh a token.
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function refresh()
    {
        return $this->respondWithToken(auth()->refresh());
    }

    /**
     * Get the token array structure.
     *
     * @param  string $token
     *
     * @return \Illuminate\Http\JsonResponse
     */
    protected function respondWithToken($token)
    {
        return response()->json([
            'access_token' => $token,
            'token_type' => 'bearer',
            'expires_in' => auth()->factory()->getTTL() * 60
        ]);
    }
}
****4 angular routing****
1) add navbar html 
<nav class="navbar navbar-light bg-light">
    <a class="navbar-brand">Navbar</a>
    <form class="form-inline">
        <a class="navbar-brand mr-5" routerLink="/login">Login</a>
        <a class="navbar-brand mr-5" routerLink="/profile">Profile</a>
    </form>
  </nav>
2) add in app compnent html touter-outlet
<app-navbar></app-navbar>
<div class="container">
  <router-outlet></router-outlet>
</div>

3)add in app-routing.module.ts our routes
const routes: Routes = [
  {path: "login",component: LoginComponent},
  {path: "signup",component: SignupComponent},
  {path: "profile",component: ProfileComponent},
  {path: "request-password-reset",component: RequestResetComponent},
  {path: "request-password-reqponse",component: ResponseResetComponent},
];


****5 create login ***
add html login
import httpClientModule 
import { HttpClientModule } from '@angular/common/http';

add function onSubmit 
onSubmit()
  {
    console.log("dd");
    return this.http.post('http://localhost:8000/api/auth/login',this.form).subscribe(
      data=>console.log(data),
      error=>console.log(error)
    );
  }

****6 cros ******

php artisan make:middlewire cors
go to app http middleware in this middelware add
header('Acces-Control-Allow-Origin : *');
header('Acces-Control-Allow-Headers : Content-type,X-Auth-Token,Authorization,Origin');

go to kernel.php 
in $routeMiddleware 
copy guest
and rename to CORS
and add in $middleware this cors

----we done 401 unothorized--------------------
in api.php remove prefix =>auth
in url dont use auth
add handleError
handleError(error)
  {
    this.error=error.error.error;
  }
change error in controller to Email or password does't exist


****7 Signup  ******





